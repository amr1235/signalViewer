# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SigV.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import Qt
import pandas as pd
import numpy as np
import pyqtgraph 
from pyqtgraph import PlotWidget , GraphicsLayoutWidget
import time as t
from scipy import signal
import matplotlib.pyplot as plt
import random
from PyQt5.QtGui import QPixmap
from lib.tab import newTab
from lib.FT import soundfileUtility




class clickableLabel(QtWidgets.QLabel) : 
    def __init__(self) : 
        super().__init__()
        self.clickMethod = None
        
    
    def mousePressEvent(self, ev):
        if ev.buttons() == QtCore.Qt.LeftButton :
            self.clickMethod()

class mainWindow(QtWidgets.QMainWindow) : 
    def __init__(self,parent = None) : 
        super().__init__()
        self.KeyUpMethod = None
        self.KeyDownMethod = None
        self.KeyLeftMethod = None
        self.KeyRightMethod = None
        self.spaceMethod = None
        self.windowResizeMethod = None
    
    def keyPressEvent(self, ev) :
        if ev.key() == Qt.Key_Up : 
            self.KeyUpMethod(ev)
        if ev.key() == Qt.Key_Down :
            self.KeyDownMethod(ev)
        if ev.key() == Qt.Key_Left :
            self.KeyLeftMethod(ev)
        if ev.key() == Qt.Key_Right : 
            self.KeyRightMethod(ev)
        if ev.key() == Qt.Key_Space : 
            self.spaceMethod(ev)
    def resizeEvent(self, ev) : 
        self.windowResizeMethod(ev)





class Ui_SignalViewer(object):

    def __init__(self):
        self.isPaused = False

    def setupUi(self, SignalViewer):
        SignalViewer.setObjectName("SignalViewer")
        SignalViewer.resize(1350, 690)
        SignalViewer.setTabShape(QtWidgets.QTabWidget.Triangular)
        SignalViewer.KeyUpMethod = self.key_up
        SignalViewer.KeyDownMethod = self.key_down    
        SignalViewer.KeyLeftMethod = self.key_left
        SignalViewer.KeyRightMethod = self.key_right
        SignalViewer.spaceMethod = self.spaceClicked
        SignalViewer.windowResizeMethod = self.windowResize
        
        self.centralwidget = QtWidgets.QWidget(SignalViewer)
        self.centralwidget.setObjectName("centralwidget")
        SignalViewer.setCentralWidget(self.centralwidget)
        

        self.menubar = QtWidgets.QMenuBar(SignalViewer)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 802, 27))
        self.menubar.setCursor(QtGui.QCursor(QtCore.Qt.OpenHandCursor))
        self.menubar.setAutoFillBackground(True)
        self.menubar.setStyleSheet("")
        self.menubar.setDefaultUp(False)
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setToolTipsVisible(False)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        SignalViewer.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(SignalViewer)
        self.statusbar.setObjectName("statusbar")
        SignalViewer.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(SignalViewer)
        self.toolBar.setEnabled(True)
        self.toolBar.setMouseTracking(True)
        self.toolBar.setMovable(False)
        self.toolBar.setObjectName("toolBar")
        SignalViewer.addToolBar(QtCore.Qt.BottomToolBarArea, self.toolBar)
        self.toolBar_2 = QtWidgets.QToolBar(SignalViewer)
        self.toolBar_2.setObjectName("toolBar_2")
        SignalViewer.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_2)
        # open file
        self.actionnew_file = QtWidgets.QAction(SignalViewer)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/folder.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionnew_file.setIcon(icon)
        self.actionnew_file.setObjectName("actionnew_file")
        self.actionnew_file.triggered.connect(self.selectFolder)

        # zoom in H
        self.actionzoom_in_h = QtWidgets.QAction(SignalViewer)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/ic_zoom_in_h_black_24dp.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionzoom_in_h.setIcon(icon1)
        self.actionzoom_in_h.setObjectName("actionzoom_in_h")
        self.actionzoom_in_h.triggered.connect(self.zoom_in_h)
        self.shortcutZoom_in_h = QtWidgets.QShortcut(QtGui.QKeySequence("Ctrl+H"),SignalViewer)
        self.shortcutZoom_in_h.activated.connect(self.zoom_in_h)
        self.actionzoom_in_h.setEnabled(False)
        # zoom out H 
        self.actionzoom_out_h = QtWidgets.QAction(SignalViewer)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/ic_zoom_out_h_black_24dp.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionzoom_out_h.setIcon(icon1)
        self.actionzoom_out_h.setObjectName("actionzoom_out_h")
        self.actionzoom_out_h.triggered.connect(self.zoom_out_h)
        self.shortcutZoom_out_h = QtWidgets.QShortcut(QtGui.QKeySequence("Shift+H"),SignalViewer)
        self.shortcutZoom_out_h.activated.connect(self.zoom_out_h)
        self.actionzoom_out_h.setEnabled(False)
        # zoom in v 
        self.actionzoom_in_v = QtWidgets.QAction(SignalViewer)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/ic_zoom_in_v_black_24dp.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionzoom_in_v.setIcon(icon1)
        self.actionzoom_in_v.setObjectName("actionzoom_in_v")
        self.actionzoom_in_v.triggered.connect(self.zoom_in_v)
        self.shortcutZoom_in_v = QtWidgets.QShortcut(QtGui.QKeySequence("Ctrl+V"),SignalViewer)
        self.shortcutZoom_in_v.activated.connect(self.zoom_in_v)
        self.actionzoom_in_v.setEnabled(False)
        # zoom out v 
        self.actionzoom_out_v = QtWidgets.QAction(SignalViewer)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/ic_zoom_out_v_black_24dp.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionzoom_out_v.setIcon(icon1)
        self.actionzoom_out_v.setObjectName("actionzoom_out_v")
        self.actionzoom_out_v.triggered.connect(self.zoom_out_v)
        self.shortcutZoom_out_v = QtWidgets.QShortcut(QtGui.QKeySequence("Shift+V"),SignalViewer)
        self.shortcutZoom_out_v.activated.connect(self.zoom_out_v)
        self.actionzoom_out_v.setEnabled(False)

        #pause 
        self.actionPause = QtWidgets.QAction(SignalViewer)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/pause.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPause.setIcon(icon1)
        self.actionPause.setObjectName("actionPause")
        self.actionPause.triggered.connect(self.pause)
        self.actionPause.setEnabled(False)

        #resume
        self.actionResume = QtWidgets.QAction(SignalViewer)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/start.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionResume.setIcon(icon1)
        self.actionResume.setObjectName("actionPause")
        self.actionResume.triggered.connect(self.resume)
        self.actionResume.setEnabled(False)
        #save file
        self.actionsave_file = QtWidgets.QAction(SignalViewer)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/diskette.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionsave_file.setIcon(icon3)
        self.actionsave_file.setObjectName("actionsave_file")
        self.actionsave_file.triggered.connect(self.generateReport)
        self.actionsave_file.setEnabled(False)
        # clear 
        self.actionClear = QtWidgets.QAction(SignalViewer)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/delete.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClear.setIcon(icon3)
        self.actionClear.setObjectName("actionClear")
        self.actionClear.triggered.connect(self.clearSignal)
        self.actionClear.setEnabled(False)

        # select Folder
        self.actionChoose_File = QtWidgets.QAction(SignalViewer)
        self.actionChoose_File.setObjectName("actionChoose_File")
        self.actionChoose_File.triggered.connect(self.selectFolder)

        self.menuFile.addAction(self.actionChoose_File)
        self.menubar.addAction(self.menuFile.menuAction())
        self.toolBar_2.addSeparator()
        self.toolBar_2.addAction(self.actionnew_file)
        self.toolBar_2.addAction(self.actionsave_file)
        self.toolBar_2.addAction(self.actionzoom_in_h)
        self.toolBar_2.addAction(self.actionzoom_out_h)
        self.toolBar_2.addAction(self.actionzoom_in_v)
        self.toolBar_2.addAction(self.actionzoom_out_v)
        self.toolBar_2.addAction(self.actionPause)
        self.toolBar_2.addAction(self.actionResume)
        self.toolBar_2.addAction(self.actionClear)

        # tab widget 
        self.tabwidget = newTab()
        self.tabwidget.setParent(self.centralwidget)
        self.tabwidget.resize(SignalViewer.width(), SignalViewer.height() - 80)
        self.tabwidget.show()
        

        self.retranslateUi(SignalViewer)
        QtCore.QMetaObject.connectSlotsByName(SignalViewer)

    def retranslateUi(self, SignalViewer):
        _translate = QtCore.QCoreApplication.translate
        SignalViewer.setWindowTitle(_translate("SignalViewer", "Signal Viewer"))
        self.menuFile.setTitle(_translate("SignalViewer", "File"))
        self.toolBar.setWindowTitle(_translate("SignalViewer", "toolBar"))
        self.toolBar_2.setWindowTitle(_translate("SignalViewer", "toolBar_2"))
        self.actionnew_file.setText(_translate("SignalViewer", "newfile"))
        self.actionnew_file.setShortcut(_translate("SignalViewer","Ctrl+N"))
        self.actionzoom_in_h.setText(_translate("SignalViewer", "zoom in horizontally"))
        self.actionzoom_in_h.setShortcut(_translate("SignalViewer", "Ctrl+H+Plus"))
        self.actionzoom_out_h.setText(_translate("SignalViewer", "zoom out horizontally"))
        self.actionzoom_out_h.setShortcut(_translate("SignalViewer", "Ctrl+Minus+H"))
        self.actionzoom_in_v.setText(_translate("SignalViewer", "zoom in virtically"))
        self.actionzoom_in_v.setShortcut(_translate("SignalViewer", "Ctrl+Plus+V"))
        self.actionzoom_out_v.setText(_translate("SignalViewer", "zoom out virtically"))
        self.actionzoom_out_v.setShortcut(_translate("SignalViewer", "Ctrl+Minus+V"))
        self.actionPause.setText(_translate("SignalViewer", "Pause"))
        self.actionResume.setText(_translate("SignalViewer", "Resume"))
        self.actionsave_file.setText(_translate("SignalViewer", "save file"))
        self.actionsave_file.setShortcut(_translate("SignalViewer", "Ctrl+S"))
        self.actionChoose_File.setText(_translate("SignalViewer", "Choose File"))
        self.actionClear.setText(_translate("SignalViewer", "Clear a Signal"))
        self.actionClear.setShortcut(_translate("SignalViewer", "Ctrl+D"))
    
    def windowResize(self,event) : 
        self.tabwidget.resize(SignalViewer.width(), SignalViewer.height() - 80)



    def enableWidgets(self) : 
        self.actionPause.setEnabled(True)
        self.actionResume.setEnabled(True)
        self.actionzoom_in_h.setEnabled(True)
        self.actionzoom_in_v.setEnabled(True)
        self.actionzoom_out_h.setEnabled(True)
        self.actionzoom_out_v.setEnabled(True)
        self.actionsave_file.setEnabled(True)
        self.actionClear.setEnabled(True)
    
    def spaceClicked(self,ev) :
        if self.isPaused : 
            self.resume()
            self.isPaused = not self.isPaused
        else : 
            self.pause()
            self.isPaused = not self.isPaused



    def clearSignal(self) :
        if self.selectedSignal == 0 : self.warnDialog("please select signal")
        else : 
            activePlots = getattr(self, "activePlots")
            index = activePlots.remove(self.selectedSignal)
            getattr(getattr(self,"signal" + str(self.selectedSignal)) , "clear")() # self.signal1.clear()
            getattr(getattr(self,"signal" + str(self.selectedSignal + 3)) , "clear")() # self.signal1.clear()
            setattr(self, "plotIndex" + str(self.selectedSignal), 200)     # self.plotIndex = 200
            setattr(self, "xPointer" + str(self.selectedSignal), 0)        # self.xPointer  = 0
            setattr(self, "plot" + str(self.selectedSignal), None)         # self.plot = None
            setattr(self, "scrollStep" + str(self.selectedSignal) + "_x", None)   # self.scrollStep_x = None
            setattr(self, "scrollStep" + str(self.selectedSignal) + "_y", None)   # self.scrollStep_y = None
            setattr(self, "xRangeStack" + str(self.selectedSignal), [])    # self.xRangeStack = []
            setattr(self, "yRangeStack", [])                               # self.yRangeStack = []
            setattr(self, "xRangeOfSignal" + str(self.selectedSignal), []) # self.xRangeOfSignal = []
            setattr(self, "yRangeOfSignal", [])                            # self.yRangeOfSignal = []
            getattr(getattr(self,"timer"+str(self.selectedSignal)), "stop")() # self.timer.stop()
            getattr(getattr(self,"timer"+str(self.selectedSignal)), "setInterval")(0) #self.timer.setInterval(0)
        
    def selectFolder(self) :
        dialog = QtWidgets.QFileDialog()
        dialog.setFileMode(QtWidgets.QFileDialog.AnyFile)
        directory = dialog.getOpenFileName(None,'select file','c:\\','csv files (*.csv) ;; sound files (*.wav)')
        fileName = directory[0]
        if fileName == '' :
            self.warnDialog("please Select data files")
            return
            timeData = None
            voltsData = None
        if fileName.split('.')[1] == 'wav' : 
            # sound file
            voltsData,sampling_rate =  soundfileUtility.fn_ReadFile(fileName)
            samplingTime = 1 / sampling_rate
            timeData = [i*samplingTime for i in range(len(voltsData))]
        elif fileName.split('.')[1] == 'csv' :
            # read csv file 
            csvFile1 = pd.read_csv(fileName)
            # exctract data to draw signal 1
            timeData = csvFile1.iloc[:,0]
            voltsData = csvFile1.iloc[:,1]

       
        self.tabwidget.add_new_viewer(timeData, voltsData)
        self.enableWidgets()
        
    def generateReport(self) :
        currentTab = self.tabwidget.currentWidget()
        fig,(subPlot1,subPlot2,subPlot3) = plt.subplots(3)
        fig.suptitle('Data Analysis')

        subPlot1.plot(currentTab.timeData, currentTab.originalVoltsData, color="rEd")
        subPlot2.specgram(currentTab.editedVoltsData,int(1 / currentTab.sampleTime))
        subPlot3.plot(currentTab.timeData, currentTab.editedVoltsData, color="magenta")

        subPlot1.title.set_text('signal Before Editing')
        subPlot2.title.set_text('spectogram for the signal after Editing')
        subPlot3.title.set_text('signal after Editing')

        subPlot1.set_xlabel('time (s)')
        subPlot1.set_ylabel('volts (v)')

        subPlot3.set_xlabel('time (v)')
        subPlot3.set_ylabel('volts (v)')

        fig.set_figheight(12)
        fig.set_figwidth(12)

        fig.tight_layout()
        R = list(range(0, 11))
        z = random.choice(R)
        fig.savefig(f"Report_{z}.pdf", bbox_inches='tight')
        window = QtWidgets.QMessageBox()
        window.setWindowTitle("done")
        window.setText("file has been saved as " + str(f"Report_{z}.pdf")+ " in your current directory")
        window.exec_()

    def pause(self) :
        currentTab = self.tabwidget.currentWidget()
        if currentTab.timer.isActive() : 
                currentTab.timer.stop()
                ranges = currentTab.plot.viewRange()
                currentTab.xRangeOfSignal = ranges[0]
                currentTab.yRangeOfSignal = ranges[1]

                    
    def resume(self) : 
        currentTab = self.tabwidget.currentWidget()
        if currentTab.timer.isActive() == False : 
                currentTab.timer.start()
        
        
    def warnDialog(self,message):
        window = QtWidgets.QMessageBox()
        window.setWindowTitle("error")
        window.setText(message)
        window.exec_()
        
    def zoom_in_h(self) :
        currentTab = self.tabwidget.currentWidget()
        if currentTab.timer.isActive() == False :
            xRangeOfSignal = currentTab.xRangeOfSignal
            currentTab.xRangeStack.append([xRangeOfSignal[0],xRangeOfSignal[1]])
            rangeOfX    = currentTab.xRangeOfSignal
            rangeOfX[0] =  rangeOfX[0] * 0.8
            rangeOfX[1] =  rangeOfX[1] * 0.8
            currentTab.plot.setXRange(rangeOfX[0],rangeOfX[1])
            currentTab.plot1.setXRange(rangeOfX[0],rangeOfX[1])
            currentTab.xRangeOfSignal = [rangeOfX[0],rangeOfX[1]]


    def zoom_out_h(self) :
        currentTab = self.tabwidget.currentWidget()
        if currentTab.timer.isActive() == False :
            xRangeStack = currentTab.xRangeStack
            if len(xRangeStack) != 0 :
                rangeOfX = xRangeStack.pop()
                currentTab.plot.setXRange(rangeOfX[0],rangeOfX[1])
                currentTab.plot1.setXRange(rangeOfX[0],rangeOfX[1])
                currentTab.xRangeOfSignal = [rangeOfX[0],rangeOfX[1]]
    
    def zoom_in_v(self) : 
        currentTab = self.tabwidget.currentWidget()
        if currentTab.timer.isActive() == False :
            yRangeOfSignal = currentTab.yRangeOfSignal
            currentTab.yRangeStack.append([yRangeOfSignal[0],yRangeOfSignal[1]])
            rangeOfY = currentTab.yRangeOfSignal
            rangeOfY[0] =  rangeOfY[0] * 0.8
            rangeOfY[1] =  rangeOfY[1] * 0.8
            currentTab.plot.setYRange(rangeOfY[0],rangeOfY[1])
            currentTab.plot1.setYRange(rangeOfY[0],rangeOfY[1])
            currentTab.yRangeOfSignal = [rangeOfY[0],rangeOfY[1]]

    def zoom_out_v(self) :
        currentTab = self.tabwidget.currentWidget()
        if currentTab.timer.isActive() == False :
            yRangeStack = currentTab.yRangeStack
            if len(yRangeStack) != 0 :
                rangeOfY = yRangeStack.pop()
                currentTab.plot.setYRange(rangeOfY[0],rangeOfY[1])
                currentTab.plot1.setYRange(rangeOfY[0],rangeOfY[1])
                currentTab.yRangeOfSignal = [rangeOfY[0],rangeOfY[1]]
    
    def scroll_up(self) :
        currentTab = self.tabwidget.currentWidget()
        if currentTab.timer.isActive() == False :
            rangOfY = currentTab.yRangeOfSignal
            rangOfY[0] += currentTab.scrollStep_y
            rangOfY[1] += currentTab.scrollStep_y
            currentTab.plot.setYRange(rangOfY[0],rangOfY[1])
            currentTab.plot1.setYRange(rangOfY[0],rangOfY[1])
            currentTab.yRangeOfSignal = [rangOfY[0],rangOfY[1]]
    
    def scroll_down(self) : 
        currentTab = self.tabwidget.currentWidget()
        if currentTab.timer.isActive() == False :
            rangOfY = currentTab.yRangeOfSignal
            rangOfY[0] -= currentTab.scrollStep_y
            rangOfY[1] -= currentTab.scrollStep_y
            currentTab.plot.setYRange(rangOfY[0],rangOfY[1])
            currentTab.plot1.setYRange(rangOfY[0],rangOfY[1])
            currentTab.yRangeOfSignal = [rangOfY[0],rangOfY[1]]

    def scroll_left(self) :
        currentTab = self.tabwidget.currentWidget()
        if currentTab.timer.isActive() == False :
            rangeOfX = currentTab.xRangeOfSignal
            rangeOfX[0] -= currentTab.scrollStep_x
            rangeOfX[1] -= currentTab.scrollStep_x
            currentTab.plot.setXRange(rangeOfX[0],rangeOfX[1])
            currentTab.plot1.setXRange(rangeOfX[0],rangeOfX[1])
            currentTab.xRangeStack = [rangeOfX[0],rangeOfX[1]]

    def scroll_right(self) :
        currentTab = self.tabwidget.currentWidget()
        if currentTab.timer.isActive() == False :
            rangeOfX = currentTab.xRangeOfSignal
            rangeOfX[0] += currentTab.scrollStep_x
            rangeOfX[1] += currentTab.scrollStep_x
            currentTab.plot.setXRange(rangeOfX[0],rangeOfX[1])
            currentTab.plot1.setXRange(rangeOfX[0],rangeOfX[1])
            currentTab.xRangeStack = [rangeOfX[0],rangeOfX[1]]

    def key_up(self,ev) : 
        self.scroll_up()
    def key_down(self,ev) : 
        self.scroll_down()
    def key_left(self,ev) : 
        self.scroll_left()
    def key_right(self,ev):
        self.scroll_right()	

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    SignalViewer = mainWindow()
    ui = Ui_SignalViewer()
    ui.setupUi(SignalViewer)
    SignalViewer.show()
    sys.exit(app.exec_())
